/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as ZustandRerenderDemoRouteImport } from './routes/zustand-rerender-demo'
import { Route as ZustandDemoRouteImport } from './routes/zustand-demo'
import { Route as RedirectRouteImport } from './routes/redirect'
import { Route as DeferredRouteImport } from './routes/deferred'
import { Route as PathlessLayoutRouteRouteImport } from './routes/_pathlessLayout/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PathlessLayoutNestedLayoutRouteRouteImport } from './routes/_pathlessLayout/_nested-layout/route'
import { Route as userUsersRouteRouteImport } from './routes/(user)/users.route'
import { Route as postsPostsRouteRouteImport } from './routes/(posts)/posts.route'
import { Route as userUsersIndexRouteImport } from './routes/(user)/users.index'
import { Route as postsPostsIndexRouteImport } from './routes/(posts)/posts.index'
import { Route as PathlessLayoutNestedLayoutRouteBRouteImport } from './routes/_pathlessLayout/_nested-layout/route-b'
import { Route as PathlessLayoutNestedLayoutRouteARouteImport } from './routes/_pathlessLayout/_nested-layout/route-a'
import { Route as userUsersUserIdRouteImport } from './routes/(user)/users.$userId'
import { Route as postsPostsPostIdRouteImport } from './routes/(posts)/posts.$postId'
import { Route as postsPostsPostIdDeepRouteImport } from './routes/(posts)/posts_.$postId.deep'
import { ServerRoute as CustomScriptDotjsServerRouteImport } from './routes/customScript[.]js'
import { ServerRoute as ApiUsersServerRouteImport } from './routes/api/users'
import { ServerRoute as ApiUsersUserIdServerRouteImport } from './routes/api/users.$userId'

const rootServerRouteImport = createServerRootRoute()

const ZustandRerenderDemoRoute = ZustandRerenderDemoRouteImport.update({
  id: '/zustand-rerender-demo',
  path: '/zustand-rerender-demo',
  getParentRoute: () => rootRouteImport,
} as any)
const ZustandDemoRoute = ZustandDemoRouteImport.update({
  id: '/zustand-demo',
  path: '/zustand-demo',
  getParentRoute: () => rootRouteImport,
} as any)
const RedirectRoute = RedirectRouteImport.update({
  id: '/redirect',
  path: '/redirect',
  getParentRoute: () => rootRouteImport,
} as any)
const DeferredRoute = DeferredRouteImport.update({
  id: '/deferred',
  path: '/deferred',
  getParentRoute: () => rootRouteImport,
} as any)
const PathlessLayoutRouteRoute = PathlessLayoutRouteRouteImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PathlessLayoutNestedLayoutRouteRoute =
  PathlessLayoutNestedLayoutRouteRouteImport.update({
    id: '/_nested-layout',
    getParentRoute: () => PathlessLayoutRouteRoute,
  } as any)
const userUsersRouteRoute = userUsersRouteRouteImport.update({
  id: '/(user)/users',
  path: '/users',
  getParentRoute: () => rootRouteImport,
} as any)
const postsPostsRouteRoute = postsPostsRouteRouteImport.update({
  id: '/(posts)/posts',
  path: '/posts',
  getParentRoute: () => rootRouteImport,
} as any)
const userUsersIndexRoute = userUsersIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => userUsersRouteRoute,
} as any)
const postsPostsIndexRoute = postsPostsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => postsPostsRouteRoute,
} as any)
const PathlessLayoutNestedLayoutRouteBRoute =
  PathlessLayoutNestedLayoutRouteBRouteImport.update({
    id: '/route-b',
    path: '/route-b',
    getParentRoute: () => PathlessLayoutNestedLayoutRouteRoute,
  } as any)
const PathlessLayoutNestedLayoutRouteARoute =
  PathlessLayoutNestedLayoutRouteARouteImport.update({
    id: '/route-a',
    path: '/route-a',
    getParentRoute: () => PathlessLayoutNestedLayoutRouteRoute,
  } as any)
const userUsersUserIdRoute = userUsersUserIdRouteImport.update({
  id: '/$userId',
  path: '/$userId',
  getParentRoute: () => userUsersRouteRoute,
} as any)
const postsPostsPostIdRoute = postsPostsPostIdRouteImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => postsPostsRouteRoute,
} as any)
const postsPostsPostIdDeepRoute = postsPostsPostIdDeepRouteImport.update({
  id: '/(posts)/posts_/$postId/deep',
  path: '/posts/$postId/deep',
  getParentRoute: () => rootRouteImport,
} as any)
const CustomScriptDotjsServerRoute = CustomScriptDotjsServerRouteImport.update({
  id: '/customScript.js',
  path: '/customScript.js',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiUsersServerRoute = ApiUsersServerRouteImport.update({
  id: '/api/users',
  path: '/api/users',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiUsersUserIdServerRoute = ApiUsersUserIdServerRouteImport.update({
  id: '/$userId',
  path: '/$userId',
  getParentRoute: () => ApiUsersServerRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/deferred': typeof DeferredRoute
  '/redirect': typeof RedirectRoute
  '/zustand-demo': typeof ZustandDemoRoute
  '/zustand-rerender-demo': typeof ZustandRerenderDemoRoute
  '/posts': typeof postsPostsRouteRouteWithChildren
  '/users': typeof userUsersRouteRouteWithChildren
  '/posts/$postId': typeof postsPostsPostIdRoute
  '/users/$userId': typeof userUsersUserIdRoute
  '/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/posts/': typeof postsPostsIndexRoute
  '/users/': typeof userUsersIndexRoute
  '/posts/$postId/deep': typeof postsPostsPostIdDeepRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/deferred': typeof DeferredRoute
  '/redirect': typeof RedirectRoute
  '/zustand-demo': typeof ZustandDemoRoute
  '/zustand-rerender-demo': typeof ZustandRerenderDemoRoute
  '/posts/$postId': typeof postsPostsPostIdRoute
  '/users/$userId': typeof userUsersUserIdRoute
  '/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/posts': typeof postsPostsIndexRoute
  '/users': typeof userUsersIndexRoute
  '/posts/$postId/deep': typeof postsPostsPostIdDeepRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_pathlessLayout': typeof PathlessLayoutRouteRouteWithChildren
  '/deferred': typeof DeferredRoute
  '/redirect': typeof RedirectRoute
  '/zustand-demo': typeof ZustandDemoRoute
  '/zustand-rerender-demo': typeof ZustandRerenderDemoRoute
  '/(posts)/posts': typeof postsPostsRouteRouteWithChildren
  '/(user)/users': typeof userUsersRouteRouteWithChildren
  '/_pathlessLayout/_nested-layout': typeof PathlessLayoutNestedLayoutRouteRouteWithChildren
  '/(posts)/posts/$postId': typeof postsPostsPostIdRoute
  '/(user)/users/$userId': typeof userUsersUserIdRoute
  '/_pathlessLayout/_nested-layout/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/_pathlessLayout/_nested-layout/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/(posts)/posts/': typeof postsPostsIndexRoute
  '/(user)/users/': typeof userUsersIndexRoute
  '/(posts)/posts_/$postId/deep': typeof postsPostsPostIdDeepRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/deferred'
    | '/redirect'
    | '/zustand-demo'
    | '/zustand-rerender-demo'
    | '/posts'
    | '/users'
    | '/posts/$postId'
    | '/users/$userId'
    | '/route-a'
    | '/route-b'
    | '/posts/'
    | '/users/'
    | '/posts/$postId/deep'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/deferred'
    | '/redirect'
    | '/zustand-demo'
    | '/zustand-rerender-demo'
    | '/posts/$postId'
    | '/users/$userId'
    | '/route-a'
    | '/route-b'
    | '/posts'
    | '/users'
    | '/posts/$postId/deep'
  id:
    | '__root__'
    | '/'
    | '/_pathlessLayout'
    | '/deferred'
    | '/redirect'
    | '/zustand-demo'
    | '/zustand-rerender-demo'
    | '/(posts)/posts'
    | '/(user)/users'
    | '/_pathlessLayout/_nested-layout'
    | '/(posts)/posts/$postId'
    | '/(user)/users/$userId'
    | '/_pathlessLayout/_nested-layout/route-a'
    | '/_pathlessLayout/_nested-layout/route-b'
    | '/(posts)/posts/'
    | '/(user)/users/'
    | '/(posts)/posts_/$postId/deep'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PathlessLayoutRouteRoute: typeof PathlessLayoutRouteRouteWithChildren
  DeferredRoute: typeof DeferredRoute
  RedirectRoute: typeof RedirectRoute
  ZustandDemoRoute: typeof ZustandDemoRoute
  ZustandRerenderDemoRoute: typeof ZustandRerenderDemoRoute
  postsPostsRouteRoute: typeof postsPostsRouteRouteWithChildren
  userUsersRouteRoute: typeof userUsersRouteRouteWithChildren
  postsPostsPostIdDeepRoute: typeof postsPostsPostIdDeepRoute
}
export interface FileServerRoutesByFullPath {
  '/customScript.js': typeof CustomScriptDotjsServerRoute
  '/api/users': typeof ApiUsersServerRouteWithChildren
  '/api/users/$userId': typeof ApiUsersUserIdServerRoute
}
export interface FileServerRoutesByTo {
  '/customScript.js': typeof CustomScriptDotjsServerRoute
  '/api/users': typeof ApiUsersServerRouteWithChildren
  '/api/users/$userId': typeof ApiUsersUserIdServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/customScript.js': typeof CustomScriptDotjsServerRoute
  '/api/users': typeof ApiUsersServerRouteWithChildren
  '/api/users/$userId': typeof ApiUsersUserIdServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/customScript.js' | '/api/users' | '/api/users/$userId'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/customScript.js' | '/api/users' | '/api/users/$userId'
  id: '__root__' | '/customScript.js' | '/api/users' | '/api/users/$userId'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  CustomScriptDotjsServerRoute: typeof CustomScriptDotjsServerRoute
  ApiUsersServerRoute: typeof ApiUsersServerRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/zustand-rerender-demo': {
      id: '/zustand-rerender-demo'
      path: '/zustand-rerender-demo'
      fullPath: '/zustand-rerender-demo'
      preLoaderRoute: typeof ZustandRerenderDemoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/zustand-demo': {
      id: '/zustand-demo'
      path: '/zustand-demo'
      fullPath: '/zustand-demo'
      preLoaderRoute: typeof ZustandDemoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/redirect': {
      id: '/redirect'
      path: '/redirect'
      fullPath: '/redirect'
      preLoaderRoute: typeof RedirectRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/deferred': {
      id: '/deferred'
      path: '/deferred'
      fullPath: '/deferred'
      preLoaderRoute: typeof DeferredRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_pathlessLayout': {
      id: '/_pathlessLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_pathlessLayout/_nested-layout': {
      id: '/_pathlessLayout/_nested-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRouteRouteImport
      parentRoute: typeof PathlessLayoutRouteRoute
    }
    '/(user)/users': {
      id: '/(user)/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof userUsersRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(posts)/posts': {
      id: '/(posts)/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof postsPostsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(user)/users/': {
      id: '/(user)/users/'
      path: '/'
      fullPath: '/users/'
      preLoaderRoute: typeof userUsersIndexRouteImport
      parentRoute: typeof userUsersRouteRoute
    }
    '/(posts)/posts/': {
      id: '/(posts)/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof postsPostsIndexRouteImport
      parentRoute: typeof postsPostsRouteRoute
    }
    '/_pathlessLayout/_nested-layout/route-b': {
      id: '/_pathlessLayout/_nested-layout/route-b'
      path: '/route-b'
      fullPath: '/route-b'
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRouteBRouteImport
      parentRoute: typeof PathlessLayoutNestedLayoutRouteRoute
    }
    '/_pathlessLayout/_nested-layout/route-a': {
      id: '/_pathlessLayout/_nested-layout/route-a'
      path: '/route-a'
      fullPath: '/route-a'
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRouteARouteImport
      parentRoute: typeof PathlessLayoutNestedLayoutRouteRoute
    }
    '/(user)/users/$userId': {
      id: '/(user)/users/$userId'
      path: '/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof userUsersUserIdRouteImport
      parentRoute: typeof userUsersRouteRoute
    }
    '/(posts)/posts/$postId': {
      id: '/(posts)/posts/$postId'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof postsPostsPostIdRouteImport
      parentRoute: typeof postsPostsRouteRoute
    }
    '/(posts)/posts_/$postId/deep': {
      id: '/(posts)/posts_/$postId/deep'
      path: '/posts/$postId/deep'
      fullPath: '/posts/$postId/deep'
      preLoaderRoute: typeof postsPostsPostIdDeepRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/customScript.js': {
      id: '/customScript.js'
      path: '/customScript.js'
      fullPath: '/customScript.js'
      preLoaderRoute: typeof CustomScriptDotjsServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/users': {
      id: '/api/users'
      path: '/api/users'
      fullPath: '/api/users'
      preLoaderRoute: typeof ApiUsersServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/users/$userId': {
      id: '/api/users/$userId'
      path: '/$userId'
      fullPath: '/api/users/$userId'
      preLoaderRoute: typeof ApiUsersUserIdServerRouteImport
      parentRoute: typeof ApiUsersServerRoute
    }
  }
}

interface PathlessLayoutNestedLayoutRouteRouteChildren {
  PathlessLayoutNestedLayoutRouteARoute: typeof PathlessLayoutNestedLayoutRouteARoute
  PathlessLayoutNestedLayoutRouteBRoute: typeof PathlessLayoutNestedLayoutRouteBRoute
}

const PathlessLayoutNestedLayoutRouteRouteChildren: PathlessLayoutNestedLayoutRouteRouteChildren =
  {
    PathlessLayoutNestedLayoutRouteARoute:
      PathlessLayoutNestedLayoutRouteARoute,
    PathlessLayoutNestedLayoutRouteBRoute:
      PathlessLayoutNestedLayoutRouteBRoute,
  }

const PathlessLayoutNestedLayoutRouteRouteWithChildren =
  PathlessLayoutNestedLayoutRouteRoute._addFileChildren(
    PathlessLayoutNestedLayoutRouteRouteChildren,
  )

interface PathlessLayoutRouteRouteChildren {
  PathlessLayoutNestedLayoutRouteRoute: typeof PathlessLayoutNestedLayoutRouteRouteWithChildren
}

const PathlessLayoutRouteRouteChildren: PathlessLayoutRouteRouteChildren = {
  PathlessLayoutNestedLayoutRouteRoute:
    PathlessLayoutNestedLayoutRouteRouteWithChildren,
}

const PathlessLayoutRouteRouteWithChildren =
  PathlessLayoutRouteRoute._addFileChildren(PathlessLayoutRouteRouteChildren)

interface postsPostsRouteRouteChildren {
  postsPostsPostIdRoute: typeof postsPostsPostIdRoute
  postsPostsIndexRoute: typeof postsPostsIndexRoute
}

const postsPostsRouteRouteChildren: postsPostsRouteRouteChildren = {
  postsPostsPostIdRoute: postsPostsPostIdRoute,
  postsPostsIndexRoute: postsPostsIndexRoute,
}

const postsPostsRouteRouteWithChildren = postsPostsRouteRoute._addFileChildren(
  postsPostsRouteRouteChildren,
)

interface userUsersRouteRouteChildren {
  userUsersUserIdRoute: typeof userUsersUserIdRoute
  userUsersIndexRoute: typeof userUsersIndexRoute
}

const userUsersRouteRouteChildren: userUsersRouteRouteChildren = {
  userUsersUserIdRoute: userUsersUserIdRoute,
  userUsersIndexRoute: userUsersIndexRoute,
}

const userUsersRouteRouteWithChildren = userUsersRouteRoute._addFileChildren(
  userUsersRouteRouteChildren,
)

interface ApiUsersServerRouteChildren {
  ApiUsersUserIdServerRoute: typeof ApiUsersUserIdServerRoute
}

const ApiUsersServerRouteChildren: ApiUsersServerRouteChildren = {
  ApiUsersUserIdServerRoute: ApiUsersUserIdServerRoute,
}

const ApiUsersServerRouteWithChildren = ApiUsersServerRoute._addFileChildren(
  ApiUsersServerRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PathlessLayoutRouteRoute: PathlessLayoutRouteRouteWithChildren,
  DeferredRoute: DeferredRoute,
  RedirectRoute: RedirectRoute,
  ZustandDemoRoute: ZustandDemoRoute,
  ZustandRerenderDemoRoute: ZustandRerenderDemoRoute,
  postsPostsRouteRoute: postsPostsRouteRouteWithChildren,
  userUsersRouteRoute: userUsersRouteRouteWithChildren,
  postsPostsPostIdDeepRoute: postsPostsPostIdDeepRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  CustomScriptDotjsServerRoute: CustomScriptDotjsServerRoute,
  ApiUsersServerRoute: ApiUsersServerRouteWithChildren,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
